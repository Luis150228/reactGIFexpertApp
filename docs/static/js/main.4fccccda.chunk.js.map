{"version":3,"sources":["components/AddCategory.js","components/helpers/getGifs.js","components/gifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setEnviado","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","serie","type","value","onChange","target","placeholder","getGifs","setEnviadotwo","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","nuevoArreglo","id","title","imagen","images","downsized_medium","GifGridItem","props","className","src","alt","GifGrid","loading","state","setState","useEffect","then","lasImagenes","setTimeout","console","log","useFetchGifs","resultadoBusqueda","texto","GifExpertApp","animes","setAnimes","anime","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WAAgB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAiBzC,OACI,sBAAMC,SAXS,SAACC,GAChBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAQ,IAC1BR,GAAW,SAAAS,GAAK,OAAKP,GAAL,mBAAoBO,OACpCN,EAAc,MAKlB,SACI,uBACAO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GACnBF,EAAcE,EAAEQ,OAAOF,QAmBnBG,YAAY,wB,+BC3BXC,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEKI,MAAMF,GAFX,cAEbG,EAFa,gBAGEA,EAAUC,OAHZ,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAgB,IAAD,EACjC,MAAO,CACHC,GAAID,EAAaC,GACjBC,MAAOF,EAAaE,MACpBC,OAAM,UAAEH,EAAaI,cAAf,aAAE,EAAqBC,iBAAiBb,QARnC,kBAYZM,GAZY,4CAAH,sDCEPQ,EAAc,SAAEC,GAEzB,OACI,sBAAMC,UAAU,2BAAhB,UACI,qBAAKC,IAAKF,EAAMJ,OAAQO,IAAKH,EAAML,QACnC,4BAAIK,EAAML,YCHTS,EAAU,SAAC,GAAqB,IAApBrB,EAAmB,EAAnBA,cAAmB,ECDhB,SAACA,GAAmB,IAAD,EACjBf,mBAAS,CAC/BsB,KAAK,GACLe,SAAQ,IAH+B,mBACpCC,EADoC,KAC7BC,EAD6B,KAqB3C,OAdAC,qBAAU,WACN1B,EAAQC,GACH0B,MAAM,SAAAC,GACPC,YAAW,WACPC,QAAQC,IAAIH,GACZH,EAAS,CACLjB,KAAKoB,EACLL,SAAQ,MAEb,UAGR,CAACtB,IAEGuB,EDlBqCQ,CAAa/B,GAA3CgC,EAF0B,EAEhCzB,KAAyBe,EAFO,EAEPA,QAEjC,OACI,qCACA,qBAAIJ,UAAU,sBAAd,kCAA0DlB,KAGzDsB,GAAW,6CACZ,qBAAKJ,UAAU,YAAf,SAEQc,EAAkBvB,KAAI,SAACwB,GAAD,OACtB,cAAC,EAAD,eAEIA,GADGA,EAAMtB,aEdhBuB,EAAe,WAAO,IAAD,EAEFjD,mBAAS,CAAC,WAFR,mBAEvBkD,EAFuB,KAEfC,EAFe,KAY9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAapD,WAAcoD,IAC3B,uBACA,uBAQA,6BAEID,EAAO1B,KAAI,SAAC4B,GAAD,OACP,cAAC,EAAD,CAAuBrC,cAAiBqC,GAAxBA,Y,MCzBpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4fccccda.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ({setEnviado}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const funcionCambio = (e)=>{\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const clikSubmit = (e)=> {\r\n        e.preventDefault();\r\n        // console.log('Enviaste informacion')\r\n        // setAnimes(serie => ['Dr Stone', ...serie])\r\n        if (inputValue.trim().length >2 ) {///El largo de el texto es mayor a 2 \r\n            setEnviado(serie => [inputValue, ...serie]);//inserta la serie\r\n            setInputValue('');//y adicional limipia el input\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={clikSubmit}>\r\n            <input\r\n            type='text'\r\n            value={inputValue}\r\n            onChange={funcionCambio}\r\n            placeholder='Inserte la serie'\r\n            />\r\n        </form>\r\n        )\r\n} ///Fin de funcion AddCategory\r\n\r\nAddCategory.propTypes = {\r\n    setEnviado: PropTypes.func.isRequired\r\n}\r\n\r\n","export const getGifs = async(setEnviadotwo)=>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(setEnviadotwo)}&limit=10&api_key=FUB8uGLxLPL2akzb8KMATa8AlTbFtB9z`;\r\n    const respuesta = await fetch(url);\r\n    const {data} = await respuesta.json();\r\n    const gifs = data.map(nuevoArreglo =>{\r\n        return {\r\n            id: nuevoArreglo.id,\r\n            title: nuevoArreglo.title,\r\n            imagen: nuevoArreglo.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n    // console.log(gifs);\r\n    // setImagenes(gifs);\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( props ) => {\r\n    // console.log(props)\r\n    return (\r\n        <div  className='card animate__backInLeft'>\r\n            <img src={props.imagen} alt={props.title} />\r\n            <p>{props.title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './gifGridItem';\r\n\r\nexport const GifGrid = ({setEnviadotwo}) => {\r\n\r\n    const { data: resultadoBusqueda, loading} = useFetchGifs(setEnviadotwo);\r\n\r\n    return (\r\n        <>\r\n        <h3 className='animate__backInLeft'>Origen GifExpertApp: {setEnviadotwo}</h3>\r\n        {/* Abajo: es un if con operador ternario ? evalua el loading si es true pone cargando en false compleata la orden */}\r\n        {/* {loading ? 'Cargando' : 'Solicitud Completa'} */}\r\n        {loading && <p>Buscando ...</p>}\r\n        <div className='card-grid'>\r\n            {\r\n                resultadoBusqueda.map((texto)=>\r\n                <GifGridItem \r\n                key = {texto.id}\r\n                {...texto} />\r\n                )\r\n            }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../../src/components/helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (setEnviadotwo) => {\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n\r\n    });\r\n\r\n    useEffect(()=>{\r\n        getGifs(setEnviadotwo)\r\n            .then( lasImagenes => {\r\n            setTimeout(() => {\r\n                console.log(lasImagenes);\r\n                setState({\r\n                    data:lasImagenes,\r\n                    loading:false\r\n                });\r\n            }, 3000);\r\n        })\r\n\r\n    }, [setEnviadotwo])\r\n    \r\n    return state;//El estado actual es 'Loading' en true\r\n    \r\n}\r\n","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [animes, setAnimes] = useState(['Minato']);\r\n\r\n    // const handleAdd = ()=>{\r\n    //     // setAnimes(['Dr Stone',...animes]);\r\n    //     setAnimes(serie => ['Dr Stone', ...serie]);////al crear el valor serie{o cualquier texto} este almacena el State{estado}\r\n    //     // console.log(animes);\r\n    // }\r\n\r\n    // console.log(animes);\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setEnviado = {setAnimes}/>\r\n            <hr/>\r\n            <br/>\r\n            {/* <ol>\r\n                {\r\n                animes.map((anime, i) =>{///Es como un ciclo for al usar el map { la i representa el idx que es otro parametro del MAP}\r\n                    return <li key = {anime}>{anime}</li>;//anime es un texto aleatorio puede ser cualquier cosa\r\n                })\r\n                }\r\n            </ol> */}\r\n            <ol>\r\n                {\r\n                animes.map((anime)=> (\r\n                    <GifGrid key = {anime} setEnviadotwo = {anime} />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}